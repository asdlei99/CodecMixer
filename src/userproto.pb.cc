// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MEPMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "userproto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MEPMessageBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MEPMessageBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* MEPMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MEPMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* MEPLoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MEPLoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MEPLoginResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MEPLoginResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MEPJoinSessionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MEPJoinSessionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MEPJoinSessionResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MEPJoinSessionResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MEPPingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MEPPingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MEPPingResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MEPPingResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MEPEndSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MEPEndSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* MEPIdentityInfos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MEPIdentityInfos_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MEPMessage_2eproto() {
  protobuf_AddDesc_MEPMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MEPMessage.proto");
  GOOGLE_CHECK(file != NULL);
  MEPMessageBase_descriptor_ = file->message_type(0);
  static const int MEPMessageBase_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPMessageBase, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPMessageBase, id_),
  };
  MEPMessageBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MEPMessageBase_descriptor_,
      MEPMessageBase::default_instance_,
      MEPMessageBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPMessageBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPMessageBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MEPMessageBase));
  MEPMessage_descriptor_ = file->message_type(1);
  static const int MEPMessage_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPMessage, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPMessage, login_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPMessage, login_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPMessage, join_session_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPMessage, join_session_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPMessage, ping_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPMessage, ping_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPMessage, end_session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPMessage, identity_infos_),
  };
  MEPMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MEPMessage_descriptor_,
      MEPMessage::default_instance_,
      MEPMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MEPMessage));
  MEPLoginRequest_descriptor_ = file->message_type(2);
  static const int MEPLoginRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPLoginRequest, identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPLoginRequest, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPLoginRequest, tick_),
  };
  MEPLoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MEPLoginRequest_descriptor_,
      MEPLoginRequest::default_instance_,
      MEPLoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPLoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPLoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MEPLoginRequest));
  MEPLoginResp_descriptor_ = file->message_type(3);
  static const int MEPLoginResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPLoginResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPLoginResp, public_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPLoginResp, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPLoginResp, tick_delay_),
  };
  MEPLoginResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MEPLoginResp_descriptor_,
      MEPLoginResp::default_instance_,
      MEPLoginResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPLoginResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPLoginResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MEPLoginResp));
  MEPJoinSessionRequest_descriptor_ = file->message_type(4);
  static const int MEPJoinSessionRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPJoinSessionRequest, session_id_),
  };
  MEPJoinSessionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MEPJoinSessionRequest_descriptor_,
      MEPJoinSessionRequest::default_instance_,
      MEPJoinSessionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPJoinSessionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPJoinSessionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MEPJoinSessionRequest));
  MEPJoinSessionResp_descriptor_ = file->message_type(5);
  static const int MEPJoinSessionResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPJoinSessionResp, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPJoinSessionResp, errcode_),
  };
  MEPJoinSessionResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MEPJoinSessionResp_descriptor_,
      MEPJoinSessionResp::default_instance_,
      MEPJoinSessionResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPJoinSessionResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPJoinSessionResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MEPJoinSessionResp));
  MEPPingRequest_descriptor_ = file->message_type(6);
  static const int MEPPingRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPPingRequest, tick_),
  };
  MEPPingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MEPPingRequest_descriptor_,
      MEPPingRequest::default_instance_,
      MEPPingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPPingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPPingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MEPPingRequest));
  MEPPingResp_descriptor_ = file->message_type(7);
  static const int MEPPingResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPPingResp, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPPingResp, delay_),
  };
  MEPPingResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MEPPingResp_descriptor_,
      MEPPingResp::default_instance_,
      MEPPingResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPPingResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPPingResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MEPPingResp));
  MEPEndSession_descriptor_ = file->message_type(8);
  static const int MEPEndSession_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPEndSession, streams_),
  };
  MEPEndSession_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MEPEndSession_descriptor_,
      MEPEndSession::default_instance_,
      MEPEndSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPEndSession, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPEndSession, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MEPEndSession));
  MEPIdentityInfos_descriptor_ = file->message_type(9);
  static const int MEPIdentityInfos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPIdentityInfos, identities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPIdentityInfos, uids_),
  };
  MEPIdentityInfos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MEPIdentityInfos_descriptor_,
      MEPIdentityInfos::default_instance_,
      MEPIdentityInfos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPIdentityInfos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MEPIdentityInfos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MEPIdentityInfos));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MEPMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MEPMessageBase_descriptor_, &MEPMessageBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MEPMessage_descriptor_, &MEPMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MEPLoginRequest_descriptor_, &MEPLoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MEPLoginResp_descriptor_, &MEPLoginResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MEPJoinSessionRequest_descriptor_, &MEPJoinSessionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MEPJoinSessionResp_descriptor_, &MEPJoinSessionResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MEPPingRequest_descriptor_, &MEPPingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MEPPingResp_descriptor_, &MEPPingResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MEPEndSession_descriptor_, &MEPEndSession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MEPIdentityInfos_descriptor_, &MEPIdentityInfos::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MEPMessage_2eproto() {
  delete MEPMessageBase::default_instance_;
  delete MEPMessageBase_reflection_;
  delete MEPMessage::default_instance_;
  delete MEPMessage_reflection_;
  delete MEPLoginRequest::default_instance_;
  delete MEPLoginRequest_reflection_;
  delete MEPLoginResp::default_instance_;
  delete MEPLoginResp_reflection_;
  delete MEPJoinSessionRequest::default_instance_;
  delete MEPJoinSessionRequest_reflection_;
  delete MEPJoinSessionResp::default_instance_;
  delete MEPJoinSessionResp_reflection_;
  delete MEPPingRequest::default_instance_;
  delete MEPPingRequest_reflection_;
  delete MEPPingResp::default_instance_;
  delete MEPPingResp_reflection_;
  delete MEPEndSession::default_instance_;
  delete MEPEndSession_reflection_;
  delete MEPIdentityInfos::default_instance_;
  delete MEPIdentityInfos_reflection_;
}

void protobuf_AddDesc_MEPMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020MEPMessage.proto\"*\n\016MEPMessageBase\022\014\n\004"
    "type\030\001 \002(\r\022\n\n\002id\030\002 \002(\r\"\365\002\n\nMEPMessage\022\035\n"
    "\004base\030\001 \002(\0132\017.MEPMessageBase\022\'\n\rlogin_re"
    "quest\030\002 \001(\0132\020.MEPLoginRequest\022!\n\nlogin_r"
    "esp\030\003 \001(\0132\r.MEPLoginResp\0224\n\024join_session"
    "_request\030\004 \001(\0132\026.MEPJoinSessionRequest\022."
    "\n\021join_session_resp\030\005 \001(\0132\023.MEPJoinSessi"
    "onResp\022%\n\014ping_request\030\006 \001(\0132\017.MEPPingRe"
    "quest\022\037\n\tping_resp\030\007 \001(\0132\014.MEPPingResp\022#"
    "\n\013end_session\030\010 \001(\0132\016.MEPEndSession\022)\n\016i"
    "dentity_infos\030\t \001(\0132\021.MEPIdentityInfos\"@"
    "\n\017MEPLoginRequest\022\020\n\010identity\030\001 \001(\r\022\r\n\005t"
    "oken\030\002 \001(\014\022\014\n\004tick\030\003 \001(\r\"V\n\014MEPLoginResp"
    "\022\017\n\007errcode\030\001 \001(\005\022\023\n\013public_addr\030\002 \001(\t\022\014"
    "\n\004tick\030\003 \001(\r\022\022\n\ntick_delay\030\004 \001(\r\"+\n\025MEPJ"
    "oinSessionRequest\022\022\n\nsession_id\030\001 \001(\014\"9\n"
    "\022MEPJoinSessionResp\022\022\n\nsession_id\030\001 \001(\014\022"
    "\017\n\007errcode\030\002 \001(\005\"\036\n\016MEPPingRequest\022\014\n\004ti"
    "ck\030\001 \001(\r\"*\n\013MEPPingResp\022\014\n\004tick\030\001 \001(\r\022\r\n"
    "\005delay\030\002 \001(\r\" \n\rMEPEndSession\022\017\n\007streams"
    "\030\001 \001(\r\"8\n\020MEPIdentityInfos\022\026\n\nidentities"
    "\030\001 \003(\rB\002\020\001\022\014\n\004uids\030\002 \003(\t", 864);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MEPMessage.proto", &protobuf_RegisterTypes);
  MEPMessageBase::default_instance_ = new MEPMessageBase();
  MEPMessage::default_instance_ = new MEPMessage();
  MEPLoginRequest::default_instance_ = new MEPLoginRequest();
  MEPLoginResp::default_instance_ = new MEPLoginResp();
  MEPJoinSessionRequest::default_instance_ = new MEPJoinSessionRequest();
  MEPJoinSessionResp::default_instance_ = new MEPJoinSessionResp();
  MEPPingRequest::default_instance_ = new MEPPingRequest();
  MEPPingResp::default_instance_ = new MEPPingResp();
  MEPEndSession::default_instance_ = new MEPEndSession();
  MEPIdentityInfos::default_instance_ = new MEPIdentityInfos();
  MEPMessageBase::default_instance_->InitAsDefaultInstance();
  MEPMessage::default_instance_->InitAsDefaultInstance();
  MEPLoginRequest::default_instance_->InitAsDefaultInstance();
  MEPLoginResp::default_instance_->InitAsDefaultInstance();
  MEPJoinSessionRequest::default_instance_->InitAsDefaultInstance();
  MEPJoinSessionResp::default_instance_->InitAsDefaultInstance();
  MEPPingRequest::default_instance_->InitAsDefaultInstance();
  MEPPingResp::default_instance_->InitAsDefaultInstance();
  MEPEndSession::default_instance_->InitAsDefaultInstance();
  MEPIdentityInfos::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MEPMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MEPMessage_2eproto {
  StaticDescriptorInitializer_MEPMessage_2eproto() {
    protobuf_AddDesc_MEPMessage_2eproto();
  }
} static_descriptor_initializer_MEPMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MEPMessageBase::kTypeFieldNumber;
const int MEPMessageBase::kIdFieldNumber;
#endif  // !_MSC_VER

MEPMessageBase::MEPMessageBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MEPMessageBase::InitAsDefaultInstance() {
}

MEPMessageBase::MEPMessageBase(const MEPMessageBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MEPMessageBase::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MEPMessageBase::~MEPMessageBase() {
  SharedDtor();
}

void MEPMessageBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MEPMessageBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MEPMessageBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MEPMessageBase_descriptor_;
}

const MEPMessageBase& MEPMessageBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MEPMessage_2eproto();
  return *default_instance_;
}

MEPMessageBase* MEPMessageBase::default_instance_ = NULL;

MEPMessageBase* MEPMessageBase::New() const {
  return new MEPMessageBase;
}

void MEPMessageBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MEPMessageBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MEPMessageBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MEPMessageBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MEPMessageBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MEPMessageBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MEPMessageBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MEPMessageBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MEPMessageBase::MergeFrom(const MEPMessageBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MEPMessageBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MEPMessageBase::CopyFrom(const MEPMessageBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MEPMessageBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MEPMessageBase::Swap(MEPMessageBase* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MEPMessageBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MEPMessageBase_descriptor_;
  metadata.reflection = MEPMessageBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MEPMessage::kBaseFieldNumber;
const int MEPMessage::kLoginRequestFieldNumber;
const int MEPMessage::kLoginRespFieldNumber;
const int MEPMessage::kJoinSessionRequestFieldNumber;
const int MEPMessage::kJoinSessionRespFieldNumber;
const int MEPMessage::kPingRequestFieldNumber;
const int MEPMessage::kPingRespFieldNumber;
const int MEPMessage::kEndSessionFieldNumber;
const int MEPMessage::kIdentityInfosFieldNumber;
#endif  // !_MSC_VER

MEPMessage::MEPMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MEPMessage::InitAsDefaultInstance() {
  base_ = const_cast< ::MEPMessageBase*>(&::MEPMessageBase::default_instance());
  login_request_ = const_cast< ::MEPLoginRequest*>(&::MEPLoginRequest::default_instance());
  login_resp_ = const_cast< ::MEPLoginResp*>(&::MEPLoginResp::default_instance());
  join_session_request_ = const_cast< ::MEPJoinSessionRequest*>(&::MEPJoinSessionRequest::default_instance());
  join_session_resp_ = const_cast< ::MEPJoinSessionResp*>(&::MEPJoinSessionResp::default_instance());
  ping_request_ = const_cast< ::MEPPingRequest*>(&::MEPPingRequest::default_instance());
  ping_resp_ = const_cast< ::MEPPingResp*>(&::MEPPingResp::default_instance());
  end_session_ = const_cast< ::MEPEndSession*>(&::MEPEndSession::default_instance());
  identity_infos_ = const_cast< ::MEPIdentityInfos*>(&::MEPIdentityInfos::default_instance());
}

MEPMessage::MEPMessage(const MEPMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MEPMessage::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  login_request_ = NULL;
  login_resp_ = NULL;
  join_session_request_ = NULL;
  join_session_resp_ = NULL;
  ping_request_ = NULL;
  ping_resp_ = NULL;
  end_session_ = NULL;
  identity_infos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MEPMessage::~MEPMessage() {
  SharedDtor();
}

void MEPMessage::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete login_request_;
    delete login_resp_;
    delete join_session_request_;
    delete join_session_resp_;
    delete ping_request_;
    delete ping_resp_;
    delete end_session_;
    delete identity_infos_;
  }
}

void MEPMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MEPMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MEPMessage_descriptor_;
}

const MEPMessage& MEPMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MEPMessage_2eproto();
  return *default_instance_;
}

MEPMessage* MEPMessage::default_instance_ = NULL;

MEPMessage* MEPMessage::New() const {
  return new MEPMessage;
}

void MEPMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::MEPMessageBase::Clear();
    }
    if (has_login_request()) {
      if (login_request_ != NULL) login_request_->::MEPLoginRequest::Clear();
    }
    if (has_login_resp()) {
      if (login_resp_ != NULL) login_resp_->::MEPLoginResp::Clear();
    }
    if (has_join_session_request()) {
      if (join_session_request_ != NULL) join_session_request_->::MEPJoinSessionRequest::Clear();
    }
    if (has_join_session_resp()) {
      if (join_session_resp_ != NULL) join_session_resp_->::MEPJoinSessionResp::Clear();
    }
    if (has_ping_request()) {
      if (ping_request_ != NULL) ping_request_->::MEPPingRequest::Clear();
    }
    if (has_ping_resp()) {
      if (ping_resp_ != NULL) ping_resp_->::MEPPingResp::Clear();
    }
    if (has_end_session()) {
      if (end_session_ != NULL) end_session_->::MEPEndSession::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_identity_infos()) {
      if (identity_infos_ != NULL) identity_infos_->::MEPIdentityInfos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MEPMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MEPMessageBase base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_login_request;
        break;
      }

      // optional .MEPLoginRequest login_request = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_login_resp;
        break;
      }

      // optional .MEPLoginResp login_resp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login_resp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_join_session_request;
        break;
      }

      // optional .MEPJoinSessionRequest join_session_request = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_join_session_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_join_session_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_join_session_resp;
        break;
      }

      // optional .MEPJoinSessionResp join_session_resp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_join_session_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_join_session_resp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ping_request;
        break;
      }

      // optional .MEPPingRequest ping_request = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ping_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ping_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ping_resp;
        break;
      }

      // optional .MEPPingResp ping_resp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ping_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ping_resp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_end_session;
        break;
      }

      // optional .MEPEndSession end_session = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_identity_infos;
        break;
      }

      // optional .MEPIdentityInfos identity_infos = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_identity_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_identity_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MEPMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .MEPMessageBase base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // optional .MEPLoginRequest login_request = 2;
  if (has_login_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->login_request(), output);
  }

  // optional .MEPLoginResp login_resp = 3;
  if (has_login_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->login_resp(), output);
  }

  // optional .MEPJoinSessionRequest join_session_request = 4;
  if (has_join_session_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->join_session_request(), output);
  }

  // optional .MEPJoinSessionResp join_session_resp = 5;
  if (has_join_session_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->join_session_resp(), output);
  }

  // optional .MEPPingRequest ping_request = 6;
  if (has_ping_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ping_request(), output);
  }

  // optional .MEPPingResp ping_resp = 7;
  if (has_ping_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ping_resp(), output);
  }

  // optional .MEPEndSession end_session = 8;
  if (has_end_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->end_session(), output);
  }

  // optional .MEPIdentityInfos identity_infos = 9;
  if (has_identity_infos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->identity_infos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MEPMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .MEPMessageBase base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // optional .MEPLoginRequest login_request = 2;
  if (has_login_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->login_request(), target);
  }

  // optional .MEPLoginResp login_resp = 3;
  if (has_login_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->login_resp(), target);
  }

  // optional .MEPJoinSessionRequest join_session_request = 4;
  if (has_join_session_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->join_session_request(), target);
  }

  // optional .MEPJoinSessionResp join_session_resp = 5;
  if (has_join_session_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->join_session_resp(), target);
  }

  // optional .MEPPingRequest ping_request = 6;
  if (has_ping_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ping_request(), target);
  }

  // optional .MEPPingResp ping_resp = 7;
  if (has_ping_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->ping_resp(), target);
  }

  // optional .MEPEndSession end_session = 8;
  if (has_end_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->end_session(), target);
  }

  // optional .MEPIdentityInfos identity_infos = 9;
  if (has_identity_infos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->identity_infos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MEPMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MEPMessageBase base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .MEPLoginRequest login_request = 2;
    if (has_login_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login_request());
    }

    // optional .MEPLoginResp login_resp = 3;
    if (has_login_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login_resp());
    }

    // optional .MEPJoinSessionRequest join_session_request = 4;
    if (has_join_session_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->join_session_request());
    }

    // optional .MEPJoinSessionResp join_session_resp = 5;
    if (has_join_session_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->join_session_resp());
    }

    // optional .MEPPingRequest ping_request = 6;
    if (has_ping_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ping_request());
    }

    // optional .MEPPingResp ping_resp = 7;
    if (has_ping_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ping_resp());
    }

    // optional .MEPEndSession end_session = 8;
    if (has_end_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_session());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .MEPIdentityInfos identity_infos = 9;
    if (has_identity_infos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->identity_infos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MEPMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MEPMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MEPMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MEPMessage::MergeFrom(const MEPMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::MEPMessageBase::MergeFrom(from.base());
    }
    if (from.has_login_request()) {
      mutable_login_request()->::MEPLoginRequest::MergeFrom(from.login_request());
    }
    if (from.has_login_resp()) {
      mutable_login_resp()->::MEPLoginResp::MergeFrom(from.login_resp());
    }
    if (from.has_join_session_request()) {
      mutable_join_session_request()->::MEPJoinSessionRequest::MergeFrom(from.join_session_request());
    }
    if (from.has_join_session_resp()) {
      mutable_join_session_resp()->::MEPJoinSessionResp::MergeFrom(from.join_session_resp());
    }
    if (from.has_ping_request()) {
      mutable_ping_request()->::MEPPingRequest::MergeFrom(from.ping_request());
    }
    if (from.has_ping_resp()) {
      mutable_ping_resp()->::MEPPingResp::MergeFrom(from.ping_resp());
    }
    if (from.has_end_session()) {
      mutable_end_session()->::MEPEndSession::MergeFrom(from.end_session());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_identity_infos()) {
      mutable_identity_infos()->::MEPIdentityInfos::MergeFrom(from.identity_infos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MEPMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MEPMessage::CopyFrom(const MEPMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MEPMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  return true;
}

void MEPMessage::Swap(MEPMessage* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(login_request_, other->login_request_);
    std::swap(login_resp_, other->login_resp_);
    std::swap(join_session_request_, other->join_session_request_);
    std::swap(join_session_resp_, other->join_session_resp_);
    std::swap(ping_request_, other->ping_request_);
    std::swap(ping_resp_, other->ping_resp_);
    std::swap(end_session_, other->end_session_);
    std::swap(identity_infos_, other->identity_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MEPMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MEPMessage_descriptor_;
  metadata.reflection = MEPMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MEPLoginRequest::kIdentityFieldNumber;
const int MEPLoginRequest::kTokenFieldNumber;
const int MEPLoginRequest::kTickFieldNumber;
#endif  // !_MSC_VER

MEPLoginRequest::MEPLoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MEPLoginRequest::InitAsDefaultInstance() {
}

MEPLoginRequest::MEPLoginRequest(const MEPLoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MEPLoginRequest::SharedCtor() {
  _cached_size_ = 0;
  identity_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tick_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MEPLoginRequest::~MEPLoginRequest() {
  SharedDtor();
}

void MEPLoginRequest::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void MEPLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MEPLoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MEPLoginRequest_descriptor_;
}

const MEPLoginRequest& MEPLoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MEPMessage_2eproto();
  return *default_instance_;
}

MEPLoginRequest* MEPLoginRequest::default_instance_ = NULL;

MEPLoginRequest* MEPLoginRequest::New() const {
  return new MEPLoginRequest;
}

void MEPLoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    identity_ = 0u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    tick_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MEPLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 identity = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identity_)));
          set_has_identity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional bytes token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tick;
        break;
      }

      // optional uint32 tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MEPLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 identity = 1;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->identity(), output);
  }

  // optional bytes token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->token(), output);
  }

  // optional uint32 tick = 3;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MEPLoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 identity = 1;
  if (has_identity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->identity(), target);
  }

  // optional bytes token = 2;
  if (has_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->token(), target);
  }

  // optional uint32 tick = 3;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MEPLoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 identity = 1;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->identity());
    }

    // optional bytes token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

    // optional uint32 tick = 3;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MEPLoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MEPLoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MEPLoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MEPLoginRequest::MergeFrom(const MEPLoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identity()) {
      set_identity(from.identity());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MEPLoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MEPLoginRequest::CopyFrom(const MEPLoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MEPLoginRequest::IsInitialized() const {

  return true;
}

void MEPLoginRequest::Swap(MEPLoginRequest* other) {
  if (other != this) {
    std::swap(identity_, other->identity_);
    std::swap(token_, other->token_);
    std::swap(tick_, other->tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MEPLoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MEPLoginRequest_descriptor_;
  metadata.reflection = MEPLoginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MEPLoginResp::kErrcodeFieldNumber;
const int MEPLoginResp::kPublicAddrFieldNumber;
const int MEPLoginResp::kTickFieldNumber;
const int MEPLoginResp::kTickDelayFieldNumber;
#endif  // !_MSC_VER

MEPLoginResp::MEPLoginResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MEPLoginResp::InitAsDefaultInstance() {
}

MEPLoginResp::MEPLoginResp(const MEPLoginResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MEPLoginResp::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0;
  public_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tick_ = 0u;
  tick_delay_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MEPLoginResp::~MEPLoginResp() {
  SharedDtor();
}

void MEPLoginResp::SharedDtor() {
  if (public_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete public_addr_;
  }
  if (this != default_instance_) {
  }
}

void MEPLoginResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MEPLoginResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MEPLoginResp_descriptor_;
}

const MEPLoginResp& MEPLoginResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MEPMessage_2eproto();
  return *default_instance_;
}

MEPLoginResp* MEPLoginResp::default_instance_ = NULL;

MEPLoginResp* MEPLoginResp::New() const {
  return new MEPLoginResp;
}

void MEPLoginResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0;
    if (has_public_addr()) {
      if (public_addr_ != &::google::protobuf::internal::kEmptyString) {
        public_addr_->clear();
      }
    }
    tick_ = 0u;
    tick_delay_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MEPLoginResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_public_addr;
        break;
      }

      // optional string public_addr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_public_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->public_addr().data(), this->public_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tick;
        break;
      }

      // optional uint32 tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tick_delay;
        break;
      }

      // optional uint32 tick_delay = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_delay_)));
          set_has_tick_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MEPLoginResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errcode(), output);
  }

  // optional string public_addr = 2;
  if (has_public_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->public_addr().data(), this->public_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->public_addr(), output);
  }

  // optional uint32 tick = 3;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tick(), output);
  }

  // optional uint32 tick_delay = 4;
  if (has_tick_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tick_delay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MEPLoginResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errcode(), target);
  }

  // optional string public_addr = 2;
  if (has_public_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->public_addr().data(), this->public_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->public_addr(), target);
  }

  // optional uint32 tick = 3;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tick(), target);
  }

  // optional uint32 tick_delay = 4;
  if (has_tick_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tick_delay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MEPLoginResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errcode());
    }

    // optional string public_addr = 2;
    if (has_public_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->public_addr());
    }

    // optional uint32 tick = 3;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

    // optional uint32 tick_delay = 4;
    if (has_tick_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick_delay());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MEPLoginResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MEPLoginResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MEPLoginResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MEPLoginResp::MergeFrom(const MEPLoginResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_public_addr()) {
      set_public_addr(from.public_addr());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
    if (from.has_tick_delay()) {
      set_tick_delay(from.tick_delay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MEPLoginResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MEPLoginResp::CopyFrom(const MEPLoginResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MEPLoginResp::IsInitialized() const {

  return true;
}

void MEPLoginResp::Swap(MEPLoginResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(public_addr_, other->public_addr_);
    std::swap(tick_, other->tick_);
    std::swap(tick_delay_, other->tick_delay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MEPLoginResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MEPLoginResp_descriptor_;
  metadata.reflection = MEPLoginResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MEPJoinSessionRequest::kSessionIdFieldNumber;
#endif  // !_MSC_VER

MEPJoinSessionRequest::MEPJoinSessionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MEPJoinSessionRequest::InitAsDefaultInstance() {
}

MEPJoinSessionRequest::MEPJoinSessionRequest(const MEPJoinSessionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MEPJoinSessionRequest::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MEPJoinSessionRequest::~MEPJoinSessionRequest() {
  SharedDtor();
}

void MEPJoinSessionRequest::SharedDtor() {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (this != default_instance_) {
  }
}

void MEPJoinSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MEPJoinSessionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MEPJoinSessionRequest_descriptor_;
}

const MEPJoinSessionRequest& MEPJoinSessionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MEPMessage_2eproto();
  return *default_instance_;
}

MEPJoinSessionRequest* MEPJoinSessionRequest::default_instance_ = NULL;

MEPJoinSessionRequest* MEPJoinSessionRequest::New() const {
  return new MEPJoinSessionRequest;
}

void MEPJoinSessionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MEPJoinSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_session_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MEPJoinSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->session_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MEPJoinSessionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes session_id = 1;
  if (has_session_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->session_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MEPJoinSessionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->session_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MEPJoinSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MEPJoinSessionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MEPJoinSessionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MEPJoinSessionRequest::MergeFrom(const MEPJoinSessionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MEPJoinSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MEPJoinSessionRequest::CopyFrom(const MEPJoinSessionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MEPJoinSessionRequest::IsInitialized() const {

  return true;
}

void MEPJoinSessionRequest::Swap(MEPJoinSessionRequest* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MEPJoinSessionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MEPJoinSessionRequest_descriptor_;
  metadata.reflection = MEPJoinSessionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MEPJoinSessionResp::kSessionIdFieldNumber;
const int MEPJoinSessionResp::kErrcodeFieldNumber;
#endif  // !_MSC_VER

MEPJoinSessionResp::MEPJoinSessionResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MEPJoinSessionResp::InitAsDefaultInstance() {
}

MEPJoinSessionResp::MEPJoinSessionResp(const MEPJoinSessionResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MEPJoinSessionResp::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  errcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MEPJoinSessionResp::~MEPJoinSessionResp() {
  SharedDtor();
}

void MEPJoinSessionResp::SharedDtor() {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (this != default_instance_) {
  }
}

void MEPJoinSessionResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MEPJoinSessionResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MEPJoinSessionResp_descriptor_;
}

const MEPJoinSessionResp& MEPJoinSessionResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MEPMessage_2eproto();
  return *default_instance_;
}

MEPJoinSessionResp* MEPJoinSessionResp::default_instance_ = NULL;

MEPJoinSessionResp* MEPJoinSessionResp::New() const {
  return new MEPJoinSessionResp;
}

void MEPJoinSessionResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
    errcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MEPJoinSessionResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_session_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_errcode;
        break;
      }

      // optional int32 errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MEPJoinSessionResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->session_id(), output);
  }

  // optional int32 errcode = 2;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->errcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MEPJoinSessionResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes session_id = 1;
  if (has_session_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->session_id(), target);
  }

  // optional int32 errcode = 2;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->errcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MEPJoinSessionResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->session_id());
    }

    // optional int32 errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MEPJoinSessionResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MEPJoinSessionResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MEPJoinSessionResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MEPJoinSessionResp::MergeFrom(const MEPJoinSessionResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MEPJoinSessionResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MEPJoinSessionResp::CopyFrom(const MEPJoinSessionResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MEPJoinSessionResp::IsInitialized() const {

  return true;
}

void MEPJoinSessionResp::Swap(MEPJoinSessionResp* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MEPJoinSessionResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MEPJoinSessionResp_descriptor_;
  metadata.reflection = MEPJoinSessionResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MEPPingRequest::kTickFieldNumber;
#endif  // !_MSC_VER

MEPPingRequest::MEPPingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MEPPingRequest::InitAsDefaultInstance() {
}

MEPPingRequest::MEPPingRequest(const MEPPingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MEPPingRequest::SharedCtor() {
  _cached_size_ = 0;
  tick_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MEPPingRequest::~MEPPingRequest() {
  SharedDtor();
}

void MEPPingRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MEPPingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MEPPingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MEPPingRequest_descriptor_;
}

const MEPPingRequest& MEPPingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MEPMessage_2eproto();
  return *default_instance_;
}

MEPPingRequest* MEPPingRequest::default_instance_ = NULL;

MEPPingRequest* MEPPingRequest::New() const {
  return new MEPPingRequest;
}

void MEPPingRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tick_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MEPPingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tick = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MEPPingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tick = 1;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MEPPingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tick = 1;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MEPPingRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tick = 1;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MEPPingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MEPPingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MEPPingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MEPPingRequest::MergeFrom(const MEPPingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tick()) {
      set_tick(from.tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MEPPingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MEPPingRequest::CopyFrom(const MEPPingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MEPPingRequest::IsInitialized() const {

  return true;
}

void MEPPingRequest::Swap(MEPPingRequest* other) {
  if (other != this) {
    std::swap(tick_, other->tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MEPPingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MEPPingRequest_descriptor_;
  metadata.reflection = MEPPingRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MEPPingResp::kTickFieldNumber;
const int MEPPingResp::kDelayFieldNumber;
#endif  // !_MSC_VER

MEPPingResp::MEPPingResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MEPPingResp::InitAsDefaultInstance() {
}

MEPPingResp::MEPPingResp(const MEPPingResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MEPPingResp::SharedCtor() {
  _cached_size_ = 0;
  tick_ = 0u;
  delay_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MEPPingResp::~MEPPingResp() {
  SharedDtor();
}

void MEPPingResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MEPPingResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MEPPingResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MEPPingResp_descriptor_;
}

const MEPPingResp& MEPPingResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MEPMessage_2eproto();
  return *default_instance_;
}

MEPPingResp* MEPPingResp::default_instance_ = NULL;

MEPPingResp* MEPPingResp::New() const {
  return new MEPPingResp;
}

void MEPPingResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tick_ = 0u;
    delay_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MEPPingResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tick = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_delay;
        break;
      }

      // optional uint32 delay = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MEPPingResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tick = 1;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tick(), output);
  }

  // optional uint32 delay = 2;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->delay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MEPPingResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tick = 1;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tick(), target);
  }

  // optional uint32 delay = 2;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->delay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MEPPingResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tick = 1;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

    // optional uint32 delay = 2;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MEPPingResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MEPPingResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MEPPingResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MEPPingResp::MergeFrom(const MEPPingResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tick()) {
      set_tick(from.tick());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MEPPingResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MEPPingResp::CopyFrom(const MEPPingResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MEPPingResp::IsInitialized() const {

  return true;
}

void MEPPingResp::Swap(MEPPingResp* other) {
  if (other != this) {
    std::swap(tick_, other->tick_);
    std::swap(delay_, other->delay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MEPPingResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MEPPingResp_descriptor_;
  metadata.reflection = MEPPingResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MEPEndSession::kStreamsFieldNumber;
#endif  // !_MSC_VER

MEPEndSession::MEPEndSession()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MEPEndSession::InitAsDefaultInstance() {
}

MEPEndSession::MEPEndSession(const MEPEndSession& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MEPEndSession::SharedCtor() {
  _cached_size_ = 0;
  streams_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MEPEndSession::~MEPEndSession() {
  SharedDtor();
}

void MEPEndSession::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MEPEndSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MEPEndSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MEPEndSession_descriptor_;
}

const MEPEndSession& MEPEndSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MEPMessage_2eproto();
  return *default_instance_;
}

MEPEndSession* MEPEndSession::default_instance_ = NULL;

MEPEndSession* MEPEndSession::New() const {
  return new MEPEndSession;
}

void MEPEndSession::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    streams_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MEPEndSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 streams = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &streams_)));
          set_has_streams();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MEPEndSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 streams = 1;
  if (has_streams()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->streams(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MEPEndSession::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 streams = 1;
  if (has_streams()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->streams(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MEPEndSession::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 streams = 1;
    if (has_streams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->streams());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MEPEndSession::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MEPEndSession* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MEPEndSession*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MEPEndSession::MergeFrom(const MEPEndSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_streams()) {
      set_streams(from.streams());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MEPEndSession::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MEPEndSession::CopyFrom(const MEPEndSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MEPEndSession::IsInitialized() const {

  return true;
}

void MEPEndSession::Swap(MEPEndSession* other) {
  if (other != this) {
    std::swap(streams_, other->streams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MEPEndSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MEPEndSession_descriptor_;
  metadata.reflection = MEPEndSession_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MEPIdentityInfos::kIdentitiesFieldNumber;
const int MEPIdentityInfos::kUidsFieldNumber;
#endif  // !_MSC_VER

MEPIdentityInfos::MEPIdentityInfos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MEPIdentityInfos::InitAsDefaultInstance() {
}

MEPIdentityInfos::MEPIdentityInfos(const MEPIdentityInfos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MEPIdentityInfos::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MEPIdentityInfos::~MEPIdentityInfos() {
  SharedDtor();
}

void MEPIdentityInfos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MEPIdentityInfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MEPIdentityInfos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MEPIdentityInfos_descriptor_;
}

const MEPIdentityInfos& MEPIdentityInfos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MEPMessage_2eproto();
  return *default_instance_;
}

MEPIdentityInfos* MEPIdentityInfos::default_instance_ = NULL;

MEPIdentityInfos* MEPIdentityInfos::New() const {
  return new MEPIdentityInfos;
}

void MEPIdentityInfos::Clear() {
  identities_.Clear();
  uids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MEPIdentityInfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 identities = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_identities())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10, input, this->mutable_identities())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uids;
        break;
      }

      // repeated string uids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_uids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uids(this->uids_size() - 1).data(),
            this->uids(this->uids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MEPIdentityInfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 identities = 1 [packed = true];
  if (this->identities_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_identities_cached_byte_size_);
  }
  for (int i = 0; i < this->identities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->identities(i), output);
  }

  // repeated string uids = 2;
  for (int i = 0; i < this->uids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->uids(i).data(), this->uids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MEPIdentityInfos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 identities = 1 [packed = true];
  if (this->identities_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _identities_cached_byte_size_, target);
  }
  for (int i = 0; i < this->identities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->identities(i), target);
  }

  // repeated string uids = 2;
  for (int i = 0; i < this->uids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uids(i).data(), this->uids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->uids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MEPIdentityInfos::ByteSize() const {
  int total_size = 0;

  // repeated uint32 identities = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->identities_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->identities(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _identities_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string uids = 2;
  total_size += 1 * this->uids_size();
  for (int i = 0; i < this->uids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->uids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MEPIdentityInfos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MEPIdentityInfos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MEPIdentityInfos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MEPIdentityInfos::MergeFrom(const MEPIdentityInfos& from) {
  GOOGLE_CHECK_NE(&from, this);
  identities_.MergeFrom(from.identities_);
  uids_.MergeFrom(from.uids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MEPIdentityInfos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MEPIdentityInfos::CopyFrom(const MEPIdentityInfos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MEPIdentityInfos::IsInitialized() const {

  return true;
}

void MEPIdentityInfos::Swap(MEPIdentityInfos* other) {
  if (other != this) {
    identities_.Swap(&other->identities_);
    uids_.Swap(&other->uids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MEPIdentityInfos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MEPIdentityInfos_descriptor_;
  metadata.reflection = MEPIdentityInfos_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
