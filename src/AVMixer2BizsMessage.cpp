// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AVMixer2BizsMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AVMixer2BizsMessage.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CCNState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCNState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCNUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCNUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCNNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCNNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCMigrationSessions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCMigrationSessions_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCSessionReleaseNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCSessionReleaseNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCNMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCNMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AVMixer2BizsMessage_2eproto() {
  protobuf_AddDesc_AVMixer2BizsMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AVMixer2BizsMessage.proto");
  GOOGLE_CHECK(file != NULL);
  CCNState_descriptor_ = file->message_type(0);
  static const int CCNState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCNState, uicur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCNState, uimax_),
  };
  CCNState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCNState_descriptor_,
      CCNState::default_instance_,
      CCNState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCNState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCNState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCNState));
  CCNUser_descriptor_ = file->message_type(1);
  static const int CCNUser_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCNUser, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCNUser, identity_),
  };
  CCNUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCNUser_descriptor_,
      CCNUser::default_instance_,
      CCNUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCNUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCNUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCNUser));
  CCNNotify_descriptor_ = file->message_type(2);
  static const int CCNNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCNNotify, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCNNotify, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCNNotify, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCNNotify, timeout_),
  };
  CCNNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCNNotify_descriptor_,
      CCNNotify::default_instance_,
      CCNNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCNNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCNNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCNNotify));
  CCMigrationSessions_descriptor_ = file->message_type(3);
  static const int CCMigrationSessions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCMigrationSessions, session_),
  };
  CCMigrationSessions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCMigrationSessions_descriptor_,
      CCMigrationSessions::default_instance_,
      CCMigrationSessions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCMigrationSessions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCMigrationSessions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCMigrationSessions));
  CCSessionReleaseNotify_descriptor_ = file->message_type(4);
  static const int CCSessionReleaseNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSessionReleaseNotify, sessionid_),
  };
  CCSessionReleaseNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCSessionReleaseNotify_descriptor_,
      CCSessionReleaseNotify::default_instance_,
      CCSessionReleaseNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSessionReleaseNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCSessionReleaseNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCSessionReleaseNotify));
  CCNMessage_descriptor_ = file->message_type(5);
  static const int CCNMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCNMessage, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCNMessage, notify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCNMessage, migrate_sessions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCNMessage, session_release_notify_),
  };
  CCNMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCNMessage_descriptor_,
      CCNMessage::default_instance_,
      CCNMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCNMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCNMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCNMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AVMixer2BizsMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCNState_descriptor_, &CCNState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCNUser_descriptor_, &CCNUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCNNotify_descriptor_, &CCNNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCMigrationSessions_descriptor_, &CCMigrationSessions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCSessionReleaseNotify_descriptor_, &CCSessionReleaseNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCNMessage_descriptor_, &CCNMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AVMixer2BizsMessage_2eproto() {
  delete CCNState::default_instance_;
  delete CCNState_reflection_;
  delete CCNUser::default_instance_;
  delete CCNUser_reflection_;
  delete CCNNotify::default_instance_;
  delete CCNNotify_reflection_;
  delete CCMigrationSessions::default_instance_;
  delete CCMigrationSessions_reflection_;
  delete CCSessionReleaseNotify::default_instance_;
  delete CCSessionReleaseNotify_reflection_;
  delete CCNMessage::default_instance_;
  delete CCNMessage_reflection_;
}

void protobuf_AddDesc_AVMixer2BizsMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031AVMixer2BizsMessage.proto\"(\n\010CCNState\022"
    "\r\n\005uiCur\030\001 \002(\r\022\r\n\005uiMax\030\002 \002(\r\"(\n\007CCNUser"
    "\022\013\n\003uid\030\001 \001(\t\022\020\n\010identity\030\002 \001(\r\"W\n\tCCNNo"
    "tify\022\021\n\tsessionid\030\001 \002(\014\022\016\n\006config\030\002 \001(\t\022"
    "\026\n\004user\030\003 \003(\0132\010.CCNUser\022\017\n\007timeout\030\004 \002(\r"
    "\"&\n\023CCMigrationSessions\022\017\n\007session\030\001 \003(\014"
    "\"+\n\026CCSessionReleaseNotify\022\021\n\tsessionid\030"
    "\001 \002(\014\"\253\001\n\nCCNMessage\022\030\n\005state\030\001 \001(\0132\t.CC"
    "NState\022\032\n\006notify\030\002 \001(\0132\n.CCNNotify\022.\n\020mi"
    "grate_sessions\030\003 \001(\0132\024.CCMigrationSessio"
    "ns\0227\n\026session_release_notify\030\004 \001(\0132\027.CCS"
    "essionReleaseNotify", 459);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AVMixer2BizsMessage.proto", &protobuf_RegisterTypes);
  CCNState::default_instance_ = new CCNState();
  CCNUser::default_instance_ = new CCNUser();
  CCNNotify::default_instance_ = new CCNNotify();
  CCMigrationSessions::default_instance_ = new CCMigrationSessions();
  CCSessionReleaseNotify::default_instance_ = new CCSessionReleaseNotify();
  CCNMessage::default_instance_ = new CCNMessage();
  CCNState::default_instance_->InitAsDefaultInstance();
  CCNUser::default_instance_->InitAsDefaultInstance();
  CCNNotify::default_instance_->InitAsDefaultInstance();
  CCMigrationSessions::default_instance_->InitAsDefaultInstance();
  CCSessionReleaseNotify::default_instance_->InitAsDefaultInstance();
  CCNMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AVMixer2BizsMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AVMixer2BizsMessage_2eproto {
  StaticDescriptorInitializer_AVMixer2BizsMessage_2eproto() {
    protobuf_AddDesc_AVMixer2BizsMessage_2eproto();
  }
} static_descriptor_initializer_AVMixer2BizsMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CCNState::kUiCurFieldNumber;
const int CCNState::kUiMaxFieldNumber;
#endif  // !_MSC_VER

CCNState::CCNState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCNState::InitAsDefaultInstance() {
}

CCNState::CCNState(const CCNState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCNState::SharedCtor() {
  _cached_size_ = 0;
  uicur_ = 0u;
  uimax_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCNState::~CCNState() {
  SharedDtor();
}

void CCNState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCNState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCNState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCNState_descriptor_;
}

const CCNState& CCNState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AVMixer2BizsMessage_2eproto();
  return *default_instance_;
}

CCNState* CCNState::default_instance_ = NULL;

CCNState* CCNState::New() const {
  return new CCNState;
}

void CCNState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uicur_ = 0u;
    uimax_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCNState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiCur = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uicur_)));
          set_has_uicur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiMax;
        break;
      }

      // required uint32 uiMax = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uimax_)));
          set_has_uimax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCNState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiCur = 1;
  if (has_uicur()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uicur(), output);
  }

  // required uint32 uiMax = 2;
  if (has_uimax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uimax(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCNState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiCur = 1;
  if (has_uicur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uicur(), target);
  }

  // required uint32 uiMax = 2;
  if (has_uimax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uimax(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCNState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiCur = 1;
    if (has_uicur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uicur());
    }

    // required uint32 uiMax = 2;
    if (has_uimax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uimax());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCNState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCNState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCNState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCNState::MergeFrom(const CCNState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uicur()) {
      set_uicur(from.uicur());
    }
    if (from.has_uimax()) {
      set_uimax(from.uimax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCNState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCNState::CopyFrom(const CCNState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCNState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CCNState::Swap(CCNState* other) {
  if (other != this) {
    std::swap(uicur_, other->uicur_);
    std::swap(uimax_, other->uimax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCNState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCNState_descriptor_;
  metadata.reflection = CCNState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCNUser::kUidFieldNumber;
const int CCNUser::kIdentityFieldNumber;
#endif  // !_MSC_VER

CCNUser::CCNUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCNUser::InitAsDefaultInstance() {
}

CCNUser::CCNUser(const CCNUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCNUser::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  identity_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCNUser::~CCNUser() {
  SharedDtor();
}

void CCNUser::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void CCNUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCNUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCNUser_descriptor_;
}

const CCNUser& CCNUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AVMixer2BizsMessage_2eproto();
  return *default_instance_;
}

CCNUser* CCNUser::default_instance_ = NULL;

CCNUser* CCNUser::New() const {
  return new CCNUser;
}

void CCNUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    identity_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCNUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_identity;
        break;
      }

      // optional uint32 identity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_identity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identity_)));
          set_has_identity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCNUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }

  // optional uint32 identity = 2;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->identity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCNUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }

  // optional uint32 identity = 2;
  if (has_identity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->identity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCNUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional uint32 identity = 2;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->identity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCNUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCNUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCNUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCNUser::MergeFrom(const CCNUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_identity()) {
      set_identity(from.identity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCNUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCNUser::CopyFrom(const CCNUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCNUser::IsInitialized() const {

  return true;
}

void CCNUser::Swap(CCNUser* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(identity_, other->identity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCNUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCNUser_descriptor_;
  metadata.reflection = CCNUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCNNotify::kSessionidFieldNumber;
const int CCNNotify::kConfigFieldNumber;
const int CCNNotify::kUserFieldNumber;
const int CCNNotify::kTimeoutFieldNumber;
#endif  // !_MSC_VER

CCNNotify::CCNNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCNNotify::InitAsDefaultInstance() {
}

CCNNotify::CCNNotify(const CCNNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCNNotify::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  config_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCNNotify::~CCNNotify() {
  SharedDtor();
}

void CCNNotify::SharedDtor() {
  if (sessionid_ != &::google::protobuf::internal::kEmptyString) {
    delete sessionid_;
  }
  if (config_ != &::google::protobuf::internal::kEmptyString) {
    delete config_;
  }
  if (this != default_instance_) {
  }
}

void CCNNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCNNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCNNotify_descriptor_;
}

const CCNNotify& CCNNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AVMixer2BizsMessage_2eproto();
  return *default_instance_;
}

CCNNotify* CCNNotify::default_instance_ = NULL;

CCNNotify* CCNNotify::New() const {
  return new CCNNotify;
}

void CCNNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sessionid()) {
      if (sessionid_ != &::google::protobuf::internal::kEmptyString) {
        sessionid_->clear();
      }
    }
    if (has_config()) {
      if (config_ != &::google::protobuf::internal::kEmptyString) {
        config_->clear();
      }
    }
    timeout_ = 0u;
  }
  user_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCNNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes sessionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sessionid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_config;
        break;
      }

      // optional string config = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->config().data(), this->config().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // repeated .CCNUser user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user;
        if (input->ExpectTag(32)) goto parse_timeout;
        break;
      }

      // required uint32 timeout = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCNNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes sessionid = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->sessionid(), output);
  }

  // optional string config = 2;
  if (has_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->config(), output);
  }

  // repeated .CCNUser user = 3;
  for (int i = 0; i < this->user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user(i), output);
  }

  // required uint32 timeout = 4;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCNNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes sessionid = 1;
  if (has_sessionid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->sessionid(), target);
  }

  // optional string config = 2;
  if (has_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->config(), target);
  }

  // repeated .CCNUser user = 3;
  for (int i = 0; i < this->user_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user(i), target);
  }

  // required uint32 timeout = 4;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCNNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes sessionid = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sessionid());
    }

    // optional string config = 2;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->config());
    }

    // required uint32 timeout = 4;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  // repeated .CCNUser user = 3;
  total_size += 1 * this->user_size();
  for (int i = 0; i < this->user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCNNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCNNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCNNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCNNotify::MergeFrom(const CCNNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_.MergeFrom(from.user_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_config()) {
      set_config(from.config());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCNNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCNNotify::CopyFrom(const CCNNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCNNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  return true;
}

void CCNNotify::Swap(CCNNotify* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(config_, other->config_);
    user_.Swap(&other->user_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCNNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCNNotify_descriptor_;
  metadata.reflection = CCNNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCMigrationSessions::kSessionFieldNumber;
#endif  // !_MSC_VER

CCMigrationSessions::CCMigrationSessions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCMigrationSessions::InitAsDefaultInstance() {
}

CCMigrationSessions::CCMigrationSessions(const CCMigrationSessions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCMigrationSessions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCMigrationSessions::~CCMigrationSessions() {
  SharedDtor();
}

void CCMigrationSessions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCMigrationSessions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCMigrationSessions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCMigrationSessions_descriptor_;
}

const CCMigrationSessions& CCMigrationSessions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AVMixer2BizsMessage_2eproto();
  return *default_instance_;
}

CCMigrationSessions* CCMigrationSessions::default_instance_ = NULL;

CCMigrationSessions* CCMigrationSessions::New() const {
  return new CCMigrationSessions;
}

void CCMigrationSessions::Clear() {
  session_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCMigrationSessions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_session;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCMigrationSessions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes session = 1;
  for (int i = 0; i < this->session_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->session(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCMigrationSessions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes session = 1;
  for (int i = 0; i < this->session_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->session(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCMigrationSessions::ByteSize() const {
  int total_size = 0;

  // repeated bytes session = 1;
  total_size += 1 * this->session_size();
  for (int i = 0; i < this->session_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->session(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCMigrationSessions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCMigrationSessions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCMigrationSessions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCMigrationSessions::MergeFrom(const CCMigrationSessions& from) {
  GOOGLE_CHECK_NE(&from, this);
  session_.MergeFrom(from.session_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCMigrationSessions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCMigrationSessions::CopyFrom(const CCMigrationSessions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCMigrationSessions::IsInitialized() const {

  return true;
}

void CCMigrationSessions::Swap(CCMigrationSessions* other) {
  if (other != this) {
    session_.Swap(&other->session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCMigrationSessions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCMigrationSessions_descriptor_;
  metadata.reflection = CCMigrationSessions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCSessionReleaseNotify::kSessionidFieldNumber;
#endif  // !_MSC_VER

CCSessionReleaseNotify::CCSessionReleaseNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCSessionReleaseNotify::InitAsDefaultInstance() {
}

CCSessionReleaseNotify::CCSessionReleaseNotify(const CCSessionReleaseNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCSessionReleaseNotify::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCSessionReleaseNotify::~CCSessionReleaseNotify() {
  SharedDtor();
}

void CCSessionReleaseNotify::SharedDtor() {
  if (sessionid_ != &::google::protobuf::internal::kEmptyString) {
    delete sessionid_;
  }
  if (this != default_instance_) {
  }
}

void CCSessionReleaseNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCSessionReleaseNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCSessionReleaseNotify_descriptor_;
}

const CCSessionReleaseNotify& CCSessionReleaseNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AVMixer2BizsMessage_2eproto();
  return *default_instance_;
}

CCSessionReleaseNotify* CCSessionReleaseNotify::default_instance_ = NULL;

CCSessionReleaseNotify* CCSessionReleaseNotify::New() const {
  return new CCSessionReleaseNotify;
}

void CCSessionReleaseNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sessionid()) {
      if (sessionid_ != &::google::protobuf::internal::kEmptyString) {
        sessionid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCSessionReleaseNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes sessionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sessionid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCSessionReleaseNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes sessionid = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->sessionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCSessionReleaseNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes sessionid = 1;
  if (has_sessionid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->sessionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCSessionReleaseNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes sessionid = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sessionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCSessionReleaseNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCSessionReleaseNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCSessionReleaseNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCSessionReleaseNotify::MergeFrom(const CCSessionReleaseNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCSessionReleaseNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCSessionReleaseNotify::CopyFrom(const CCSessionReleaseNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSessionReleaseNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CCSessionReleaseNotify::Swap(CCSessionReleaseNotify* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCSessionReleaseNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCSessionReleaseNotify_descriptor_;
  metadata.reflection = CCSessionReleaseNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCNMessage::kStateFieldNumber;
const int CCNMessage::kNotifyFieldNumber;
const int CCNMessage::kMigrateSessionsFieldNumber;
const int CCNMessage::kSessionReleaseNotifyFieldNumber;
#endif  // !_MSC_VER

CCNMessage::CCNMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCNMessage::InitAsDefaultInstance() {
  state_ = const_cast< ::CCNState*>(&::CCNState::default_instance());
  notify_ = const_cast< ::CCNNotify*>(&::CCNNotify::default_instance());
  migrate_sessions_ = const_cast< ::CCMigrationSessions*>(&::CCMigrationSessions::default_instance());
  session_release_notify_ = const_cast< ::CCSessionReleaseNotify*>(&::CCSessionReleaseNotify::default_instance());
}

CCNMessage::CCNMessage(const CCNMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCNMessage::SharedCtor() {
  _cached_size_ = 0;
  state_ = NULL;
  notify_ = NULL;
  migrate_sessions_ = NULL;
  session_release_notify_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCNMessage::~CCNMessage() {
  SharedDtor();
}

void CCNMessage::SharedDtor() {
  if (this != default_instance_) {
    delete state_;
    delete notify_;
    delete migrate_sessions_;
    delete session_release_notify_;
  }
}

void CCNMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCNMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCNMessage_descriptor_;
}

const CCNMessage& CCNMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AVMixer2BizsMessage_2eproto();
  return *default_instance_;
}

CCNMessage* CCNMessage::default_instance_ = NULL;

CCNMessage* CCNMessage::New() const {
  return new CCNMessage;
}

void CCNMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_state()) {
      if (state_ != NULL) state_->::CCNState::Clear();
    }
    if (has_notify()) {
      if (notify_ != NULL) notify_->::CCNNotify::Clear();
    }
    if (has_migrate_sessions()) {
      if (migrate_sessions_ != NULL) migrate_sessions_->::CCMigrationSessions::Clear();
    }
    if (has_session_release_notify()) {
      if (session_release_notify_ != NULL) session_release_notify_->::CCSessionReleaseNotify::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCNMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CCNState state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_notify;
        break;
      }

      // optional .CCNNotify notify = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_migrate_sessions;
        break;
      }

      // optional .CCMigrationSessions migrate_sessions = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_migrate_sessions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_migrate_sessions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_session_release_notify;
        break;
      }

      // optional .CCSessionReleaseNotify session_release_notify = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_release_notify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_release_notify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCNMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CCNState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->state(), output);
  }

  // optional .CCNNotify notify = 2;
  if (has_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->notify(), output);
  }

  // optional .CCMigrationSessions migrate_sessions = 3;
  if (has_migrate_sessions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->migrate_sessions(), output);
  }

  // optional .CCSessionReleaseNotify session_release_notify = 4;
  if (has_session_release_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->session_release_notify(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCNMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CCNState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->state(), target);
  }

  // optional .CCNNotify notify = 2;
  if (has_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->notify(), target);
  }

  // optional .CCMigrationSessions migrate_sessions = 3;
  if (has_migrate_sessions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->migrate_sessions(), target);
  }

  // optional .CCSessionReleaseNotify session_release_notify = 4;
  if (has_session_release_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->session_release_notify(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCNMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CCNState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

    // optional .CCNNotify notify = 2;
    if (has_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notify());
    }

    // optional .CCMigrationSessions migrate_sessions = 3;
    if (has_migrate_sessions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->migrate_sessions());
    }

    // optional .CCSessionReleaseNotify session_release_notify = 4;
    if (has_session_release_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session_release_notify());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCNMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCNMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCNMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCNMessage::MergeFrom(const CCNMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      mutable_state()->::CCNState::MergeFrom(from.state());
    }
    if (from.has_notify()) {
      mutable_notify()->::CCNNotify::MergeFrom(from.notify());
    }
    if (from.has_migrate_sessions()) {
      mutable_migrate_sessions()->::CCMigrationSessions::MergeFrom(from.migrate_sessions());
    }
    if (from.has_session_release_notify()) {
      mutable_session_release_notify()->::CCSessionReleaseNotify::MergeFrom(from.session_release_notify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCNMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCNMessage::CopyFrom(const CCNMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCNMessage::IsInitialized() const {

  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  if (has_notify()) {
    if (!this->notify().IsInitialized()) return false;
  }
  if (has_session_release_notify()) {
    if (!this->session_release_notify().IsInitialized()) return false;
  }
  return true;
}

void CCNMessage::Swap(CCNMessage* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(notify_, other->notify_);
    std::swap(migrate_sessions_, other->migrate_sessions_);
    std::swap(session_release_notify_, other->session_release_notify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCNMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCNMessage_descriptor_;
  metadata.reflection = CCNMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
